basePath: /
consumes:
- application/json
definitions:
  handlers.authRequest:
    properties:
      birth_date:
        example: "2000-01-01"
        type: string
      email:
        example: john@gmai.com
        type: string
      full_name:
        example: Johny Cash
        type: string
      password:
        example: "123456"
        type: string
      username:
        example: Johnny
        type: string
    type: object
  handlers.authResponse:
    properties:
      token:
        type: string
    type: object
  handlers.genresCreateRequest:
    properties:
      name:
        type: string
    type: object
host: https://sp-clone-server.herokuapp.com/
info:
  contact:
    email: rasulov-emirlan@gmail.com
    name: Rasulov Emirlan
  description: This is a backend server for spotify clone.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Spotify Clone Server
  version: "1.1"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Returns a json web token if user is registered in database and
        enters correct data
      parameters:
      - description: Authorization request
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.authRequest'
      produces:
      - application/json
      responses:
        "200":
          description: json web token
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns his token
      parameters:
      - description: Authorization request
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.authRequest'
      produces:
      - application/json
      responses:
        "200":
          description: json web token
      summary: Register user
      tags:
      - auth
  /genres:
    get:
      consumes:
      - application/json
      description: Lists all the genres in our database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
      summary: List genres
      tags:
      - genres
    post:
      consumes:
      - application/json
      description: Creates a new genre
      parameters:
      - description: A name for new genre
        in: body
        name: name
        required: true
        schema:
          $ref: '#/definitions/handlers.genresCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: we created your genre
      summary: Create a new genre
      tags:
      - genres
    put:
      consumes:
      - application/json
      description: Adds a song to a genre
      parameters:
      - description: id for a genre
        in: query
        name: genre
        required: true
        type: integer
      - description: id for a song
        in: query
        name: song
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we added a new song to the genre
      summary: Add a song
      tags:
      - genres
  /genres/{genre}:
    get:
      consumes:
      - application/json
      description: Adds a song to a genre
      parameters:
      - description: id for a genre
        in: path
        name: genre
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we added a new song to the genre
      summary: Add a song
      tags:
      - genres
  /playlists:
    get:
      consumes:
      - application/json
      description: Lists all the playlists in our database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
      summary: List playlists
      tags:
      - playlists
    post:
      consumes:
      - application/json
      description: Creates a new playlist that can be accesed by anyone but only you
        can edit it
      parameters:
      - description: JWToken for auth
        in: header
        name: Authorization
        required: true
        type: string
      - description: The name of the playlist
        in: formData
        name: name
        required: true
        type: string
      - description: The name of the playlist
        in: formData
        name: cover
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: we created your playlist
      summary: Create a playlist
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: Adds a song to whatever playlist you want to. But it has to be
        your playlist that you created
      parameters:
      - description: JWToken for auth
        in: header
        name: Authorization
        required: true
        type: string
      - description: The id for the playlist
        in: query
        name: playlist
        required: true
        type: integer
      - description: The id for the song
        in: query
        name: song
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we created your playlist
      summary: Add a song
      tags:
      - playlists
  /playlists/{id}:
    get:
      consumes:
      - application/json
      description: Gives you an array of json with songs from a playlist you want
      parameters:
      - description: The id for the playlist
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we created your playlist
      summary: Get Songs from playlist
      tags:
      - playlists
  /songs:
    get:
      consumes:
      - application/json
      description: Returns songs from some id to some id
      parameters:
      - description: from which id to start
        in: query
        name: from
        required: true
        type: integer
      - description: at which id to end
        in: query
        name: to
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: here your songs
      summary: Get songs
      tags:
      - songs
    post:
      consumes:
      - application/json
      description: Uploads a song and its cover with all the info about that song
      parameters:
      - description: JWToken for auth
        in: header
        name: Authorization
        required: true
        type: string
      - description: The actual audiofile
        in: formData
        name: audio
        required: true
        type: file
      - description: The cover for the song
        in: formData
        name: cover
        required: true
        type: file
      - description: The name for that song
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: we uploaded your song
      summary: Upload a song
      tags:
      - songs
swagger: "2.0"
