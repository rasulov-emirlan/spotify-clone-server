consumes:
- application/json
definitions:
  handlers.authRequest:
    properties:
      birth_date:
        example: "2000-01-01"
        type: string
      email:
        example: john@gmai.com
        type: string
      full_name:
        example: Johny Cash
        type: string
      password:
        example: "123456"
        type: string
      username:
        example: Johnny
        type: string
    type: object
  handlers.authResponse:
    properties:
      token:
        type: string
    type: object
  handlers.countriesCreateRquest:
    properties:
      name:
        type: string
    type: object
  handlers.genresAddLocalizationRequest:
    properties:
      genre_id:
        type: integer
      lanugage_id:
        type: integer
      name:
        type: string
    type: object
  handlers.languagesCreateRequest:
    properties:
      name:
        type: string
    type: object
  models.Country:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Song:
    properties:
      author:
        $ref: '#/definitions/models.User'
      cover_url:
        type: string
      id:
        type: integer
      length:
        type: integer
      name:
        type: string
      url:
        type: string
    type: object
  models.User:
    properties:
      id:
        example: 0
        type: integer
      profile_picture_url:
        type: string
      username:
        example: johny
        type: string
    type: object
info:
  contact:
    email: rasulov-emirlan@gmail.com
    name: Rasulov Emirlan
  description: This is a backend server for spotify clone.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Spotify Clone Server
  version: "1.1"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Returns a json web token if user is registered in database and
        enters correct data
      parameters:
      - description: Authorization request
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.authRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.authResponse'
      summary: Login user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user and returns his token
      parameters:
      - description: Authorization request
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.authRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.authResponse'
      summary: Register user
      tags:
      - auth
  /countries:
    get:
      consumes:
      - application/json
      description: Returns all the countries in our database
      produces:
      - application/json
      responses:
        "201":
          description: Success
          schema:
            items:
              $ref: '#/definitions/models.Country'
            type: array
      summary: List countries
      tags:
      - countries
    post:
      consumes:
      - application/json
      description: Adds a new country to our database
      parameters:
      - description: Bearer jwt
        in: header
        name: Authorization
        required: true
        type: string
      - description: request
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.countriesCreateRquest'
      produces:
      - application/json
      responses:
        "201":
          description: 201 if we added your country
      summary: Create country
      tags:
      - countries
  /genres:
    get:
      consumes:
      - application/json
      description: Lists all the genres in our database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
      summary: List genres
      tags:
      - genres
    patch:
      consumes:
      - application/json
      description: Creates a new genre
      parameters:
      - description: Bearer JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: A name for new genre
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.genresAddLocalizationRequest'
      produces:
      - application/json
      responses:
        "201":
          description: we created your genre
      summary: Create a new genre
      tags:
      - genres
    post:
      consumes:
      - multipart/form-data
      description: Adds a new name for genre in a different language
      parameters:
      - description: Bearer JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: A name for new genre
        in: formData
        name: name
        required: true
        type: string
      - description: LanguageID to specify language of a name
        in: formData
        name: languageID
        required: true
        type: integer
      - description: Cover image for the genre
        in: formData
        name: cover
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: we created your genre
      summary: Add a localization
      tags:
      - genres
    put:
      consumes:
      - application/json
      description: Adds a song to a genre
      parameters:
      - description: id for a genre
        in: query
        name: genre
        required: true
        type: integer
      - description: id for a song
        in: query
        name: song
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we added a new song to the genre
      summary: Add a song
      tags:
      - genres
  /genres/{genre}:
    get:
      consumes:
      - application/json
      description: Adds a song to a genre
      parameters:
      - description: id for a genre
        in: path
        name: genre
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we added a new song to the genre
      summary: Add a song
      tags:
      - genres
  /languages:
    get:
      consumes:
      - application/json
      description: Returns an array of all languages in our database
      produces:
      - application/json
      responses:
        "200":
          description: we will give you an array of languages
      summary: Get all languages
      tags:
      - languages
    post:
      consumes:
      - application/json
      description: Creates a new language
      parameters:
      - description: Bearer JWT Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: A name for new genre
        in: body
        name: param
        required: true
        schema:
          $ref: '#/definitions/handlers.languagesCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: we created your language
      summary: Create a new language
      tags:
      - languages
  /playlists:
    get:
      consumes:
      - application/json
      description: Lists all the playlists in our database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: body
      summary: List playlists
      tags:
      - playlists
    post:
      consumes:
      - multipart/form-data
      description: Creates a new playlist that can be accesed by anyone but only you
        can edit it
      parameters:
      - description: JWToken for auth
        in: header
        name: Authorization
        required: true
        type: string
      - description: The name of the playlist
        in: formData
        name: name
        required: true
        type: string
      - description: The name of the playlist
        in: formData
        name: cover
        required: true
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: we created your playlist
      summary: Create a playlist
      tags:
      - playlists
    put:
      consumes:
      - application/json
      description: Adds a song to whatever playlist you want to. But it has to be
        your playlist that you created
      parameters:
      - description: JWToken for auth
        in: header
        name: Authorization
        required: true
        type: string
      - description: The id for the playlist
        in: query
        name: playlist
        required: true
        type: integer
      - description: The id for the song
        in: query
        name: song
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we created your playlist
      summary: Add a song
      tags:
      - playlists
  /playlists/{id}:
    get:
      consumes:
      - application/json
      description: Gives you an array of json with songs from a playlist you want
      parameters:
      - description: The id for the playlist
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: we created your playlist
      summary: Get Songs from playlist
      tags:
      - playlists
  /songs:
    get:
      consumes:
      - application/json
      description: Returns songs from some id to some id
      parameters:
      - description: from which id to start
        in: query
        name: from
        required: true
        type: integer
      - description: at which id to end
        in: query
        name: to
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: list of songs
          schema:
            items:
              $ref: '#/definitions/models.Song'
            type: array
      summary: Get songs
      tags:
      - songs
    post:
      consumes:
      - multipart/form-data
      description: Uploads a song and its cover with all the info about that song
      parameters:
      - description: JWToken for auth
        in: header
        name: Authorization
        required: true
        type: string
      - description: The actual audiofile
        in: formData
        name: audio
        required: true
        type: file
      - description: The cover for the song
        in: formData
        name: cover
        required: true
        type: file
      - description: The name for that song
        in: formData
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: we uploaded your song
      summary: Upload a song
      tags:
      - songs
  /users/favorite/songs/:
    get:
      consumes:
      - application/json
      description: Returns an array of favorite songs
      parameters:
      - description: User id
        in: query
        name: user
        required: true
        type: integer
      - description: how many songs you want
        in: query
        name: limit
        required: true
        type: integer
      - description: from which index to start
        in: query
        name: offset
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: array of favorite songs
          schema:
            items:
              $ref: '#/definitions/models.Song'
            type: array
      summary: Get Favorite Songs
      tags:
      - users
  /users/favorite/songs/{song}:
    post:
      consumes:
      - application/json
      description: Adds a new favorite song for a certain user
      parameters:
      - description: Bearer jwt
        in: header
        name: Authorization
        required: true
        type: string
      - description: Song id
        in: path
        name: song
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: 201 if we added your country
      summary: Add favorite song
      tags:
      - users
swagger: "2.0"
